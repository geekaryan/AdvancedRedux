{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = {\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload; //actions what we are getting from the user..\n      //here we are checking whether the item is already existed or not  by using find.. method basically\n      //we are making array of items ..\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      //if the item is not already existed so basically what we are going to do we basically use the push method to add items in the array..\n      if (!existingItem) {\n        //state to item we go then we use push providing the already existing and adding newItems values to it...\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        //if the item is already existing we are going to increment the quantity, and totalPrice is equal to existing item price + newItem price...\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      //we are expecting the item while removing so ya we put our payload equl to the id...\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n\n      //if the quantity of the item is equal to 1 then we have to remove the item entirely so we are goona use filter method...\n      //basically to remove something from the list we use filter method..\n      if (existingItem.quantity === 1) {\n        //so here we are bascially filtering out the item by simply calling that show only those items which are not equal to id..\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        //if the item is more than one then we simply goona decrement the quantity and the total Price is also gonna decrement by the original price of the item...\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n};\nexport default cartSlice.reducers;\nexport const cartActions = cartSlice.actions;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","itemId","price","quantity","totalPrice","title","removeItemFromCart","filter","cartActions","actions"],"sources":["C:/Users/sudoa/OneDrive/Documents/codes/reactjs/Udemy/section 19/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = {\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload; //actions what we are getting from the user..\r\n      //here we are checking whether the item is already existed or not  by using find.. method basically\r\n      //we are making array of items ..\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      //if the item is not already existed so basically what we are going to do we basically use the push method to add items in the array..\r\n      if (!existingItem) {\r\n        //state to item we go then we use push providing the already existing and adding newItems values to it...\r\n        state.items.push({\r\n          itemId: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        //if the item is already existing we are going to increment the quantity, and totalPrice is equal to existing item price + newItem price...\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      //we are expecting the item while removing so ya we put our payload equl to the id...\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n\r\n      //if the quantity of the item is equal to 1 then we have to remove the item entirely so we are goona use filter method...\r\n      //basically to remove something from the list we use filter method..\r\n      if (existingItem.quantity === 1) {\r\n        //so here we are bascially filtering out the item by simply calling that show only those items which are not equal to id..\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        //if the item is more than one then we simply goona decrement the quantity and the total Price is also gonna decrement by the original price of the item...\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\nexport default cartSlice.reducers;\r\n\r\nexport const cartActions = cartSlice.actions;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAG;EAChBC,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,aAAa,EAAE;EACjB,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAa,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC3B,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAC;MAChC;MACA;MACA,MAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAK,CAACS,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACvE;MACA,IAAI,CAACH,YAAY,EAAE;QACjB;QACAJ,KAAK,CAACJ,KAAK,CAACY,IAAI,CAAC;UACfC,MAAM,EAAEP,OAAO,CAACK,EAAE;UAClBG,KAAK,EAAER,OAAO,CAACQ,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAEV,OAAO,CAACQ,KAAK;UACzBhB,IAAI,EAAEQ,OAAO,CAACW;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACAT,YAAY,CAACO,QAAQ,EAAE;QACvBP,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACQ,UAAU,GAAGV,OAAO,CAACQ,KAAK;MACnE;IACF,CAAC;IACDI,kBAAkB,CAACd,KAAK,EAAEC,MAAM,EAAE;MAChC;MACA,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAK,CAACS,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;;MAE/D;MACA;MACA,IAAIH,YAAY,CAACO,QAAQ,KAAK,CAAC,EAAE;QAC/B;QACAX,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACmB,MAAM,CAAET,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC5D,CAAC,MAAM;QACL;QACAH,YAAY,CAACO,QAAQ,EAAE;QACvBP,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACM,KAAK;MACxE;IACF;EACF;AACF,CAAC;AAED,eAAejB,SAAS,CAACK,QAAQ;AAEjC,OAAO,MAAMkB,WAAW,GAAGvB,SAAS,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}